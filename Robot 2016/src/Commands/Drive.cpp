// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Drive.h"
#include "SmartDashboard/SmartDashboard.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

Drive::Drive(int SensitivityScale): Command() {
    m_SensitivityScale = SensitivityScale;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveControl.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void Drive::Initialize() {
	SmartDashboard::init();
}

// Called repeatedly when this Command is scheduled to run
void Drive::Execute() {
	std::shared_ptr<Joystick> joystick = Robot::oi->getJoystick();
	float x = joystick->GetX();
	float y = joystick->GetY();
	if (x < 0.1 && x > -0.1)
		x = 0;
	if (y < 0.1 && y > -0.1)
		y = 0;

	std::pair<float, float> scaled = ScaleAxis(x, y, m_SensitivityScale);

	Robot::driveControl.get()->TakeJoystickInputs(scaled.first, scaled.second);
}

// Make this return true when this Command no longer needs to run execute()
bool Drive::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void Drive::End() {
	Robot::driveControl.get()->TakeJoystickInputs(0, 0);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void Drive::Interrupted() {

}

/**
 * Scale Axis by a given factor
 */
std::pair<float, float> Drive::ScaleAxis(float x, float y, float scaleFactor) {
	// Scaling the input to exponential curve. x = input from stick -1..1, f=factor
	// Where as f increases the slower the ramp to full speed across low values of |x|
	// and the faster the ramp to full for higher values of |x|. f must be 2 or greater and
	// a whole number. Value needs to be multiplied by -1 if x<0
	// scaled = ((f^(|x|))-1/(f-1)


	float xScaled = ((std::pow(scaleFactor, std::abs(x)))-1)/(scaleFactor-1) * (x < 0 ? -1 : 1);
	float yScaled = ((std::pow(scaleFactor, std::abs(y)))-1)/(scaleFactor-1) * (y < 0 ? -1 : 1);

	SmartDashboard::PutNumber("Scale Factor", scaleFactor);
	SmartDashboard::PutNumber("Y-Scale", yScaled);
	SmartDashboard::PutNumber("X-Scale", xScaled);

	return std::pair<float, float>(xScaled, yScaled);
}
