// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "DriveControl.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/Drive.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DriveControl::DriveControl() : Subsystem("DriveControl") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    leftSpeedController1 = RobotMap::driveControlLeftSpeedController1;
    leftSpeedController2 = RobotMap::driveControlLeftSpeedController2;
    rightSpeedController1 = RobotMap::driveControlRightSpeedController1;
    rightSpeedController2 = RobotMap::driveControlRightSpeedController2;
    robotDrive = RobotMap::driveControlRobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    digitalGyro = RobotMap::driveControlDigitalGyro;
    digitalGyro.get()->Calibrate();

    // Timing settings. These are timed numbers measured as the amount of time it takes
    // the robot to move 10' at the given power level.
    SmartDashboard::PutNumber("Full Power 10' Time", 0.92);
    SmartDashboard::PutNumber("Half Power 10' Time", 1.84);
    SmartDashboard::PutNumber("1/3rd Power 10' Time", 2.76);

    // Gryo tolerance - used in auto to provide non-perfect directions
    SmartDashboard::PutNumber("Auto Gyro Tolerance (+- Deg)", 5);

    autoSpeedChooser.reset(new SendableChooser());
    autoSpeedChooser->AddDefault("Full Speed", new std::string("FULL"));
    autoSpeedChooser->AddObject("Half-Speed", new std::string("HALF"));
    autoSpeedChooser->AddObject("1/3rd Speed", new std::string("THIRD"));
   	SmartDashboard::PutData("Autonomous Speed Selection", autoSpeedChooser.get());
}

void DriveControl::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new Drive(10));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

float DriveControl::GetGyroAngle() {
	return digitalGyro->GetAngle();
}

void DriveControl::UpdateDashboard() {
	SmartDashboard::PutNumber("Gyro Heading", Robot::driveControl.get()->GetGyroAngle());
}

/*
 * Takes the axis-values from the joystick and translates to motion.
 */
void DriveControl::TakeJoystickInputs(float x, float y) {
	if (Robot::chassis.get()->IsOrientationInverted()) {
		x = -1 * x;
		y = -1 * y;
	}
	robotDrive->ArcadeDrive(-1 * y, -3 * x / 4, true);
}

double DriveControl::getFullPowerTime() {
	return SmartDashboard::GetNumber("Full Power 10' Time", 0.92);
}

double DriveControl::getHalfPowerTime() {
	return SmartDashboard::GetNumber("Half Power 10' Time", 1.84);
}

double DriveControl::getThirdPowerTime() {
	return SmartDashboard::GetNumber("1/3rd Power 10' Time", 2.76);
}

double DriveControl::getAutoGyroTolerance() {
	return SmartDashboard::GetNumber("Auto Gyro Tolerance (+- Deg)", 5);
}

std::string DriveControl::getAutoSpeedSelection() {
	std::shared_ptr<ITable> table = autoSpeedChooser->GetTable();
	return table->GetString("selected", "FULL");
}

/**
 * Returns the float value for the motor drive power for the given set time.
 */
float DriveControl::getAutoSpeedValue() {
	std::string speed = getAutoSpeedSelection();
	if (speed == "FULL") {
		return 1;
	} else if (speed == "HALF") {
		return 0.5;
	} else if (speed == "THIRD") {
		return 0.33333;
	}

	return 1;
}

double DriveControl::getAutoSetPowerTime() {
	std::string speed = getAutoSpeedSelection();
	if (speed == "FULL") {
		return getFullPowerTime();
	} else if (speed == "HALF") {
		return getHalfPowerTime();
	} else if (speed == "THIRD") {
		return getThirdPowerTime();
	}

	return 1;
}
