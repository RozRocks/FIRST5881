// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "DriveControl.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/Drive.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DriveControl::DriveControl() : Subsystem("DriveControl") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    leftSpeedController1 = RobotMap::driveControlLeftSpeedController1;
    leftSpeedController2 = RobotMap::driveControlLeftSpeedController2;
    rightSpeedController1 = RobotMap::driveControlRightSpeedController1;
    rightSpeedController2 = RobotMap::driveControlRightSpeedController2;
    robotDrive = RobotMap::driveControlRobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    digitalGyro = RobotMap::driveControlDigitalGyro;
    digitalGyro.get()->Calibrate();
}

void DriveControl::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new Drive(10));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

float DriveControl::GetGyroAngle() {
	return digitalGyro->GetAngle();
}

/*
 * Takes the axis-values from the joystick and translates to motion.
 */
void DriveControl::TakeJoystickInputs(float x, float y) {
	robotDrive->ArcadeDrive(-1 * y, -3 * x / 4, true);
}
