// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.techvalleyhigh.frc5881;

import org.techvalleyhigh.frc5881.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.techvalleyhigh.frc5881.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton joystickButton1;
    public JoystickButton joystickButton2;
    public JoystickButton joystickButton3;
    public JoystickButton joystickButton4;
    public JoystickButton joystickButton7;
    public JoystickButton joystickButton8;
    public JoystickButton joystickButton9;
    public JoystickButton joystickButton12;
    public Joystick joystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick = new Joystick(0);
        
        joystickButton12 = new JoystickButton(joystick, 12);
        joystickButton12.whenPressed(new RecalibrateGyro());
        joystickButton9 = new JoystickButton(joystick, 9);
        joystickButton9.whenPressed(new ReverseOrientation());
        joystickButton8 = new JoystickButton(joystick, 8);
        joystickButton8.whenPressed(new ForwardCam2());
        joystickButton7 = new JoystickButton(joystick, 7);
        joystickButton7.whenPressed(new ForwardCam1());
        joystickButton4 = new JoystickButton(joystick, 4);
        joystickButton4.whileHeld(new ArmLock());
        joystickButton3 = new JoystickButton(joystick, 3);
        joystickButton3.whileHeld(new ArmOpen());
        joystickButton2 = new JoystickButton(joystick, 2);
        joystickButton2.whileHeld(new ArmCapture());
        joystickButton1 = new JoystickButton(joystick, 1);
        joystickButton1.whileHeld(new ArmEject());


        // SmartDashboard Buttons
        SmartDashboard.putData("Drive: Flatter", new Drive(2));
        SmartDashboard.putData("Drive: Medium Slow", new Drive(5));
        SmartDashboard.putData("Drive: Slow RampUp", new Drive(10));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick() {
        return joystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

